datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  username     String   @unique
  password     String
  fullName     String
  profilePhoto String?  @map("profile_photo")
  headline     String?
  userType     UserType
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  employer         Employer?
  profile          Profile? 
  messagesSent     Messages[]      @relation("MessagesSender")
  messagesReceived Messages[]      @relation("MessagesReceiver")
  notifications    Notifications[]
  Applications     Applications[]
}

model Profile {
  id             String   @id @default(uuid())
  userId         String   @unique
  contactNumber  String?
  address        String?
  linkedin       String?
  website        String?
  summary        String? 
  experience     Json?
  education      Json?
  certifications Json?
  skills         Skills[]
  languages      String[] 
  achievements   Json? 
  projects       Json? 
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Employer {
  id          String  @id @default(uuid())
  userId      String  @unique
  companyId   String
  companyName String
  jobs        Jobs[]
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company     Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Company {
  id          String     @id @default(uuid())
  name        String
  website     String
  description String?
  isVerified  Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  employers   Employer[]
}

model Jobs {
  id             String         @id @default(uuid())
  employerId     String
  title          String
  description    String
  location       String?
  employmentType EmploymentType
  salaryRange    String?
  skillsRequired String?
  createdAt      DateTime       @default(now())
  applications   Applications[]
  employer       Employer       @relation(fields: [employerId], references: [id], onDelete: Cascade)
}

model Applications {
  id          String            @id @default(uuid())
  userId      String
  jobId       String
  resumeUrl   String
  coverLetter String?
  status      ApplicationStatus @default(PENDING)
  appliedAt   DateTime          @default(now())
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  job         Jobs              @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model Skills {
  id        String  @id @default(uuid())
  profileId String
  skillName String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Messages {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String
  content    String
  createdAt  DateTime @default(now())
  sender     User     @relation("MessagesSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User     @relation("MessagesReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
}

model Notifications {
  id        String   @id @default(uuid())
  userId    String
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserType {
  CANDIDATE
  EMPLOYER
  ADMIN
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}
